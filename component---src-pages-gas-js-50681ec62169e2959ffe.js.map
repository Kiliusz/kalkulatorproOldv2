{"version":3,"sources":["webpack:///./src/components/Basics/DisplayResults.js","webpack:///./src/components/Gas/GasCalc.js","webpack:///./src/components/Gas/GasInfo.js","webpack:///./src/pages/Gas.js","webpack:///./src/components/Basics/ResultSubHeader.js"],"names":["StyledResult","styled","p","DisplayResults","result","isRoundDuct","map","item","style","isAboveAcceptable","color","key","Math","random","diameter","pressureDrop","speed","StyledWrapper","div","ResultFrames","FrameForInputs","StyledFrames","GasCalc","state","flowGas","powerGas","hasResult","validationMsg","handleChange","e","id","target","val","value","setState","Calc","calculateResults","render","this","title","InputNum","labelVal","onChange","ResultSubHeader","Component","GasInfo","isInfoOpen","isPipesDimsOpen","isTipsOpen","handleClick","toggledFlag","newState","isKnowledgeOpen","handleCloseClick","Button","onClick","text","InfoText","isOpen","imgPath","helpIcon","folder","PipesList","pipes","knowledge","Gas","ContentWrapper","React","StyledP","theme","grayextralight","primarygreen","children"],"mappings":"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","file":"component---src-pages-gas-js-50681ec62169e2959ffe.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledResult = styled.p`\r\n  color: white;\r\n  /* margin: 0.7rem 0; */\r\n`;\r\n\r\nconst DisplayResults = ({ result, isRoundDuct }) => {\r\n  if (result) {\r\n    return result.map((item) => {\r\n      return (\r\n        <StyledResult\r\n          style={item.isAboveAcceptable ? { color: \"red\" } : null}\r\n          key={Math.random()}\r\n        >\r\n          {isRoundDuct ? \"φ\" : \"\"}\r\n          {item.diameter} &nbsp; - &nbsp;{item.pressureDrop} Pa/m &nbsp;-&nbsp;\r\n          {item.speed} m/s\r\n        </StyledResult>\r\n      );\r\n    });\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport default DisplayResults;\r\n","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport FrameForInputs from \"../Basics/FrameForInputs\";\r\nimport InputNum from \"../Basics/InputNum\";\r\nimport * as Calc from \"../../hardData/physicalCalculations\";\r\nimport ResultSubHeader from \"../Basics/ResultSubHeader\";\r\nimport DisplayResults from \"../Basics/DisplayResults\";\r\n\r\nconst StyledWrapper = styled.div`\r\n  display: grid;\r\n  padding: 0;\r\n`;\r\n\r\nconst ResultFrames = styled(FrameForInputs)`\r\n  display: block;\r\n`;\r\n\r\nconst StyledFrames = styled(FrameForInputs)`\r\n  grid-template-columns: 1fr 1fr;\r\n`;\r\n\r\nclass GasCalc extends Component {\r\n  state = { flowGas: \"\", powerGas: \"\", result: \"\", hasResult: false, validationMsg: \"\" };\r\n\r\n  handleChange = (e) => {\r\n    let id = e.target.id;\r\n    let val = e.target.value;\r\n    if (val > 0) {\r\n      id === \"flowGas\"\r\n        ? this.setState({ powerGas: Calc.calcGasPower(val) })\r\n        : this.setState({ flowGas: Calc.calcGasFlow(val) });\r\n      this.calculateResults(id, val);\r\n    } else {\r\n      this.setState({\r\n        [id]: val,\r\n        hasResult: false,\r\n        result: \"\",\r\n        validationMsg: \"Wprowadź przepływ większy od zera\",\r\n      });\r\n    }\r\n  };\r\n\r\n  calculateResults = (id, value) => {\r\n    this.setState({ [id]: value }, () => {\r\n      let result = Calc.calcArrayOfPressDropGas(this.state.flowGas, 6);\r\n      this.setState({ hasResult: true, result, validationMsg: \"\" });\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let { flowGas, powerGas, result, hasResult, validationMsg } = this.state;\r\n    return (\r\n      <StyledWrapper>\r\n        <StyledFrames title=\"Dobór przewodu gazowego\">\r\n          <InputNum\r\n            id=\"flowGas\"\r\n            labelVal=\"Przepływ m3/h\"\r\n            onChange={this.handleChange}\r\n            value={flowGas}\r\n          />\r\n          <InputNum\r\n            id=\"powerGas\"\r\n            labelVal=\"moc w kW\"\r\n            onChange={this.handleChange}\r\n            value={powerGas}\r\n          />\r\n        </StyledFrames>\r\n        {result && (\r\n          <ResultFrames title=\"Wyniki\">\r\n            <ResultSubHeader>\r\n              Dla{\" \"}\r\n              <span>\r\n                {flowGas} m3/h ~ {powerGas} kW{\" \"}\r\n              </span>{\" \"}\r\n              dobrano następujące przewody:\r\n            </ResultSubHeader>\r\n            <DisplayResults result={result} />\r\n          </ResultFrames>\r\n        )}\r\n        {hasResult && result === false && (\r\n          <ResultFrames title=\"Komunikat\">Zbyt duży przepływ</ResultFrames>\r\n        )}\r\n        {validationMsg && <ResultFrames title=\"Komunikat\">{validationMsg}</ResultFrames>}\r\n      </StyledWrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GasCalc;\r\n","import React, { Component } from \"react\";\r\nimport Button from \"../Basics/Button\";\r\nimport InfoText from \"../Basics/InfoText\";\r\nimport helpIcon from \"../../assets/HelpIcons/help.svg\";\r\nimport folder from \"../../assets/HelpIcons/folder.svg\";\r\nimport knowledge from \"../../assets/HelpIcons/knowledge.svg\";\r\nimport PipesList from \"../Basics/PipesList\";\r\nimport * as pipes from \"../../hardData/pipes\";\r\n\r\nclass GasInfo extends Component {\r\n  state = {\r\n    isInfoOpen: false,\r\n    isPipesDimsOpen: false,\r\n    isTipsOpen: false\r\n  };\r\n\r\n  handleClick = e => {\r\n    let toggledFlag = !this.state[e.target.id];\r\n    let newState = {\r\n      isInfoOpen: false,\r\n      isPipesDimsOpen: false,\r\n      isKnowledgeOpen: false\r\n    };\r\n    newState[e.target.id] = toggledFlag;\r\n    this.setState(newState);\r\n  };\r\n\r\n  handleCloseClick = () => {\r\n    let newState = {\r\n      isInfoOpen: false,\r\n      isPipesDimsOpen: false,\r\n      isKnowledgeOpen: false\r\n    };\r\n    this.setState(newState);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Button id=\"isInfoOpen\" onClick={this.handleClick} text=\"Instrukcja\" />\r\n        <Button\r\n          id=\"isPipesDimsOpen\"\r\n          onClick={this.handleClick}\r\n          text=\"Typoszereg\"\r\n        />\r\n        <Button id=\"isKnowledgeOpen\" onClick={this.handleClick} text=\"Wiedza\" />\r\n        <InfoText\r\n          onClick={this.handleCloseClick}\r\n          isOpen={this.state.isInfoOpen}\r\n          imgPath={helpIcon}\r\n        >\r\n          <p>\r\n            Wprowadź przepływ w m3/h lub moc w kW aby program automatycznie\r\n            dobrał średnicę rur i policzył spadek jednostkowy.\r\n          </p>\r\n          <p>\r\n            W przypadku urządzeń o bardzo niskiej sprawności należy posługiwać\r\n            się przepływem.\r\n          </p>\r\n          <p>\r\n            Przeliczenie z mocy na przepływ odbywa się z uwzględnieniem\r\n            sprawności typowych kotłów gazowych.\r\n          </p>\r\n          <p>\r\n            Pole przepływ w m3/h lub mocy w kW można wypełniać wedle uznania. Po\r\n            wpisaniu jednej wartości, druga wartość zostanie automatycznie\r\n            przeliczona.\r\n          </p>\r\n        </InfoText>\r\n        <InfoText\r\n          onClick={this.handleCloseClick}\r\n          isOpen={this.state.isPipesDimsOpen}\r\n          imgPath={folder}\r\n        >\r\n          <h3>Rury stalowe</h3>\r\n          <PipesList pipes={pipes.steelPipesDiameters} />\r\n        </InfoText>\r\n        <InfoText\r\n          onClick={this.handleCloseClick}\r\n          isOpen={this.state.isKnowledgeOpen}\r\n          imgPath={knowledge}\r\n        >\r\n          <p>\r\n            Wzrost ciśnienia gazu ziemnego w odcinku pionowym przy wznoszeniu o\r\n            1,0 m wynosi 5,4Pa\r\n          </p>\r\n          <p>Dobór rur na podstawie kryterium prędkości 6 m/s.</p>\r\n          <p>\r\n            Zgodnie z rozp. \"sprawie warunków technicznych, jakim powinny\r\n            odpowiadać sieci gazowe i ich usytuowanie\" sieci gazowe dzielą się\r\n            na:\r\n            <ul>\r\n              <li>niskie ciśn. - do 10 kPa (0,1 bar) włącznie</li>\r\n              <li>\r\n                średnie ciśn. - pow. 10 kPa (0,1 bar) do 500 kPa (5 bar)\r\n                włącznie\r\n              </li>\r\n              <li>\r\n                podw. średnie ciśn. - pow. 500 kPa (5 bar) do 1,6 MPa (16 bar)\r\n                włącznie\r\n              </li>\r\n              <li>wyoskie ciśn. - powyżej 1,6 MPa (16 bar)</li>\r\n            </ul>\r\n          </p>\r\n          <p>\r\n            Wymagane ciśnienie gazu dla typowych urządzeń gazowych wynosi 1,6 -\r\n            2,5 kPa (16 mbar - 25 mbar)\r\n          </p>\r\n        </InfoText>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default GasInfo;\r\n","import React from \"react\";\r\n\r\nimport Layout from \"../components/Styles/layout\";\r\nimport GasCalc from \"../components/Gas/GasCalc\";\r\nimport ContentWrapper from \"../components/Basics/ContentWrapper\";\r\nimport GasInfo from \"../components/Gas/GasInfo\";\r\n\r\nclass Gas extends React.Component {\r\n  render() {\r\n    return (\r\n      <Layout>\r\n        <ContentWrapper>\r\n          <GasCalc />\r\n          <GasInfo />\r\n        </ContentWrapper>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\nexport default Gas;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledP = styled.p`\r\n  margin: 0 0 1rem 0;\r\n  font-size: 1.6rem;\r\n  line-height: 2.5rem;\r\n  color: ${({ theme }) => theme.grayextralight};\r\n\r\n  span {\r\n    margin: 0 1rem 0 1rem;\r\n    padding: 0 0.6rem 0 0.6rem;\r\n    border-left: 2px solid ${({ theme }) => theme.primarygreen};\r\n    border-right: 2px solid ${({ theme }) => theme.primarygreen};\r\n  }\r\n`;\r\n\r\nconst ResultSubHeader = ({ children }) => <StyledP>{children}</StyledP>;\r\n\r\nexport default ResultSubHeader;\r\n"],"sourceRoot":""}