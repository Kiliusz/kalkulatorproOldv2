{"version":3,"sources":["webpack:///./src/components/Basics/DisplayResults.js","webpack:///./src/components/Vent/VentCalc.js","webpack:///./src/components/Vent/VentInfo.js","webpack:///./src/pages/Vent.js","webpack:///./src/components/Basics/ResultSubHeader.js"],"names":["StyledResult","styled","p","DisplayResults","result","isRoundDuct","map","item","style","isAboveAcceptable","color","key","Math","random","diameter","pressureDrop","speed","StyledWrapper","div","StyledFrames","FrameForInputs","ResultFrames","VentCalc","state","flowRoundCMPH","flowRoundLPS","flowRectCMPH","flowRectLPS","hasResult","validationMsg","handleRoundChange","e","value","target","id","setState","Calc","calculateResults","render","this","title","InputNum","labelVal","onChange","ResultSubHeader","Component","VentInfo","isInfoOpen","isPipesDimsOpen","isTipsOpen","handleClick","toggledFlag","newState","isKnowledgeOpen","handleCloseClick","Button","onClick","text","InfoText","isOpen","imgPath","helpIcon","folder","PipesList","pipes","knowledge","Vent","ContentWrapper","React","StyledP","theme","grayextralight","primarygreen","children"],"mappings":"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","file":"component---src-pages-vent-js-b7bb6d0d9b9ba523818c.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledResult = styled.p`\r\n  color: white;\r\n  /* margin: 0.7rem 0; */\r\n`;\r\n\r\nconst DisplayResults = ({ result, isRoundDuct }) => {\r\n  if (result) {\r\n    return result.map((item) => {\r\n      return (\r\n        <StyledResult\r\n          style={item.isAboveAcceptable ? { color: \"red\" } : null}\r\n          key={Math.random()}\r\n        >\r\n          {isRoundDuct ? \"φ\" : \"\"}\r\n          {item.diameter} &nbsp; - &nbsp;{item.pressureDrop} Pa/m &nbsp;-&nbsp;\r\n          {item.speed} m/s\r\n        </StyledResult>\r\n      );\r\n    });\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport default DisplayResults;\r\n","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport FrameForInputs from \"../Basics/FrameForInputs\";\r\nimport InputNum from \"../Basics/InputNum\";\r\nimport * as Calc from \"../../hardData/physicalCalculations\";\r\nimport ResultSubHeader from \"../Basics/ResultSubHeader\";\r\nimport DisplayResults from \"../Basics/DisplayResults\";\r\n\r\nconst StyledWrapper = styled.div`\r\n  display: grid;\r\n  padding: 0;\r\n`;\r\n\r\nconst StyledFrames = styled(FrameForInputs)`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n`;\r\n\r\nconst ResultFrames = styled(FrameForInputs)`\r\n  display: block;\r\n`;\r\n\r\nclass VentCalc extends Component {\r\n  state = {\r\n    flowRoundCMPH: \"\",\r\n    flowRoundLPS: \"\",\r\n    flowRectCMPH: \"\",\r\n    flowRectLPS: \"\",\r\n    result: \"\",\r\n    hasResult: false,\r\n    validationMsg: \"\",\r\n  };\r\n\r\n  handleRoundChange = (e) => {\r\n    let value = e.target.value;\r\n    let id = e.target.id;\r\n    if (value > 0) {\r\n      id === \"flowRoundCMPH\"\r\n        ? this.setState({ flowRoundLPS: Calc.cmphToLps(value) })\r\n        : this.setState({ flowRoundCMPH: Calc.lpsToCmph(value) });\r\n      this.calculateResults(id, value);\r\n    } else {\r\n      this.setState({\r\n        [id]: value,\r\n        hasResult: false,\r\n        result: \"\",\r\n        validationMsg: \"Wprowadź przepływ większy od zera\",\r\n      });\r\n    }\r\n  };\r\n\r\n  calculateResults = (id, value) => {\r\n    this.setState({ [id]: value }, () => {\r\n      let result = Calc.calcArrayOfPressDropAir(5.5, this.state.flowRoundCMPH, 0.15);\r\n      this.setState({ hasResult: true, result, validationMsg: \"\" });\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let {\r\n      flowRoundCMPH,\r\n      flowRoundLPS,\r\n      flowRectCMPH,\r\n      flowRectLPS,\r\n      result,\r\n      hasResult,\r\n      validationMsg,\r\n    } = this.state;\r\n\r\n    return (\r\n      <StyledWrapper>\r\n        <StyledFrames title=\"Dobór kanału okrągłego\">\r\n          <InputNum\r\n            id=\"flowRoundCMPH\"\r\n            labelVal=\"Przepływ m3/h\"\r\n            onChange={this.handleRoundChange}\r\n            value={flowRoundCMPH}\r\n          />\r\n          <InputNum\r\n            id=\"flowRoundLPS\"\r\n            labelVal=\"Przepływ dm3/s\"\r\n            onChange={this.handleRoundChange}\r\n            value={flowRoundLPS}\r\n          />\r\n        </StyledFrames>\r\n\r\n        {result && (\r\n          <ResultFrames title=\"Wyniki\">\r\n            <ResultSubHeader>\r\n              Dla{\" \"}\r\n              <span>\r\n                {flowRoundCMPH} m3/h ~ {flowRoundLPS} dm3/s{\" \"}\r\n              </span>{\" \"}\r\n              dobrano następujące kanały:\r\n            </ResultSubHeader>\r\n            <DisplayResults result={result} isRoundDuct />\r\n          </ResultFrames>\r\n        )}\r\n        {hasResult && result === false && (\r\n          <ResultFrames title=\"Komunikat\">\r\n            Zbyt duży przepływ dla wybranego typoszeregu rur\r\n          </ResultFrames>\r\n        )}\r\n\r\n        {validationMsg && <ResultFrames title=\"Komunikat\">{validationMsg}</ResultFrames>}\r\n\r\n        {/* <StyledFrames title=\"Dobór kanału prostokątnego\">\r\n          <InputNum\r\n            id=\"flowRectCMPH\"\r\n            labelVal=\"Przepływ m3/h\"\r\n            onChange={this.handleRectChange}\r\n            value={flowRectCMPH}\r\n          />\r\n          <InputNum\r\n            id=\"flowRectLPS\"\r\n            labelVal=\"Przepływ dm3/s\"\r\n            onChange={this.handleRectChange}\r\n            value={flowRectLPS}\r\n          />\r\n        </StyledFrames> */}\r\n      </StyledWrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default VentCalc;\r\n","import React, { Component } from \"react\";\r\nimport Button from \"../Basics/Button\";\r\nimport InfoText from \"../Basics/InfoText\";\r\nimport helpIcon from \"../../assets/HelpIcons/help.svg\";\r\nimport folder from \"../../assets/HelpIcons/folder.svg\";\r\nimport knowledge from \"../../assets/HelpIcons/knowledge.svg\";\r\nimport PipesList from \"../Basics/PipesList\";\r\nimport * as pipes from \"../../hardData/pipes\";\r\n\r\nclass VentInfo extends Component {\r\n  state = {\r\n    isInfoOpen: false,\r\n    isPipesDimsOpen: false,\r\n    isTipsOpen: false\r\n  };\r\n\r\n  handleClick = e => {\r\n    let toggledFlag = !this.state[e.target.id];\r\n    let newState = {\r\n      isInfoOpen: false,\r\n      isPipesDimsOpen: false,\r\n      isKnowledgeOpen: false\r\n    };\r\n    newState[e.target.id] = toggledFlag;\r\n    this.setState(newState);\r\n  };\r\n\r\n  handleCloseClick = () => {\r\n    let newState = {\r\n      isInfoOpen: false,\r\n      isPipesDimsOpen: false,\r\n      isKnowledgeOpen: false\r\n    };\r\n    this.setState(newState);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Button id=\"isInfoOpen\" onClick={this.handleClick} text=\"Instrukcja\" />\r\n        <Button\r\n          id=\"isPipesDimsOpen\"\r\n          onClick={this.handleClick}\r\n          text=\"Typoszereg\"\r\n        />\r\n        <Button id=\"isKnowledgeOpen\" onClick={this.handleClick} text=\"Wiedza\" />\r\n        <InfoText\r\n          onClick={this.handleCloseClick}\r\n          isOpen={this.state.isInfoOpen}\r\n          imgPath={helpIcon}\r\n        >\r\n          <p>\r\n            Kanały wentylacyjne dobierane są w oparciu o kryterium prędkości.\r\n          </p>\r\n          <p>\r\n            Opór jednostkowy w Pa/m obliczany jest na podstawie wzoru\r\n            Darcy-Weisbecha. Przyjęto chropowatość bezwględną dla stali\r\n            ocynkowanej.\r\n          </p>\r\n        </InfoText>\r\n        <InfoText\r\n          onClick={this.handleCloseClick}\r\n          isOpen={this.state.isPipesDimsOpen}\r\n          imgPath={folder}\r\n        >\r\n          <h3>Rury SPIRO</h3>\r\n          <PipesList pipes={pipes.spiroPipes} />\r\n        </InfoText>\r\n        <InfoText\r\n          onClick={this.handleCloseClick}\r\n          isOpen={this.state.isKnowledgeOpen}\r\n          imgPath={knowledge}\r\n        >\r\n          <p>Kryterium prędkość dla doboru kanałów wynosi 5,5 m/s</p>\r\n          <p>Zalecana prędkość powietrza przy czerpni nie więcej niż 2,5 m/s</p>\r\n          <p>\r\n            Zalecana prędkość powietrza przy wyrzutni nie więcej niż 4,0 m/s\r\n          </p>\r\n          <p>\r\n            W przypadku kanałów w obiektach przemysłowych prędkości powietrza w\r\n            kanałach mogą być większe, rzędu 6-10 m/s\r\n          </p>\r\n          <p>\r\n            Dla kanałów przy nawiewnikach zaleca się prędkości mniejsze 3-4 m/s\r\n          </p>\r\n        </InfoText>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default VentInfo;\r\n","import React from \"react\";\r\nimport Layout from \"../components/Styles/layout\";\r\nimport VentCalc from \"../components/Vent/VentCalc\";\r\nimport ContentWrapper from \"../components/Basics/ContentWrapper\";\r\nimport VentInfo from \"../components/Vent/VentInfo\";\r\n\r\nclass Vent extends React.Component {\r\n  render() {\r\n    return (\r\n      <Layout>\r\n        <ContentWrapper>\r\n          <VentCalc />\r\n          <VentInfo />\r\n        </ContentWrapper>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\nexport default Vent;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledP = styled.p`\r\n  margin: 0 0 1rem 0;\r\n  font-size: 1.6rem;\r\n  line-height: 2.5rem;\r\n  color: ${({ theme }) => theme.grayextralight};\r\n\r\n  span {\r\n    margin: 0 1rem 0 1rem;\r\n    padding: 0 0.6rem 0 0.6rem;\r\n    border-left: 2px solid ${({ theme }) => theme.primarygreen};\r\n    border-right: 2px solid ${({ theme }) => theme.primarygreen};\r\n  }\r\n`;\r\n\r\nconst ResultSubHeader = ({ children }) => <StyledP>{children}</StyledP>;\r\n\r\nexport default ResultSubHeader;\r\n"],"sourceRoot":""}