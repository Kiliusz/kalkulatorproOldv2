{"version":3,"sources":["webpack:///./src/components/Gas/GasCalc.js","webpack:///./src/components/Gas/GasInfo.js","webpack:///./src/pages/Gas.js","webpack:///./src/components/Basics/ResultSubHeader.js","webpack:///./src/components/Basics/DisplayResults.js"],"names":["StyledWrapper","styled","div","withConfig","displayName","componentId","ResultFrames","FrameForInputs","StyledFrames","GasCalc","state","flowGas","powerGas","result","hasResult","validationMsg","handleChange","e","_this$setState","id","target","val","value","_this","setState","Calc","calculateResults","_this$setState2","render","_this$state","this","react_default","a","createElement","title","InputNum","labelVal","onChange","ResultSubHeader","DisplayResults","Component","GasInfo","isInfoOpen","isPipesDimsOpen","isTipsOpen","handleClick","toggledFlag","newState","isKnowledgeOpen","handleCloseClick","Button","onClick","text","InfoText","isOpen","imgPath","helpIcon","folder","PipesList","pipes","knowledge","Gas","layout","ContentWrapper","Gas_GasCalc","Gas_GasInfo","React","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","StyledP","p","_ref","theme","grayextralight","_ref2","primarygreen","_ref3","_ref4","children","StyledResult","isRoundDuct","map","item","style","isAboveAcceptable","color","key","Math","random","diameter","pressureDrop","speed"],"mappings":"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","file":"component---src-pages-gas-js-f197d0f0ed7993691bc8.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport FrameForInputs from \"../Basics/FrameForInputs\";\r\nimport InputNum from \"../Basics/InputNum\";\r\nimport * as Calc from \"../../hardData/physicalCalculations\";\r\nimport ResultSubHeader from \"../Basics/ResultSubHeader\";\r\nimport DisplayResults from \"../Basics/DisplayResults\";\r\n\r\nconst StyledWrapper = styled.div`\r\n  display: grid;\r\n  padding: 0;\r\n`;\r\n\r\nconst ResultFrames = styled(FrameForInputs)`\r\n  display: block;\r\n`;\r\n\r\nconst StyledFrames = styled(FrameForInputs)`\r\n  grid-template-columns: 1fr 1fr;\r\n`;\r\n\r\nclass GasCalc extends Component {\r\n  state = { flowGas: \"\", powerGas: \"\", result: \"\", hasResult: false, validationMsg: \"\" };\r\n\r\n  handleChange = (e) => {\r\n    let id = e.target.id;\r\n    let val = e.target.value;\r\n    if (val > 0) {\r\n      id === \"flowGas\"\r\n        ? this.setState({ powerGas: Calc.calcGasPower(val) })\r\n        : this.setState({ flowGas: Calc.calcGasFlow(val) });\r\n      this.calculateResults(id, val);\r\n    } else {\r\n      this.setState({\r\n        [id]: val,\r\n        hasResult: false,\r\n        result: \"\",\r\n        validationMsg: \"Wprowadź przepływ większy od zera\",\r\n      });\r\n    }\r\n  };\r\n\r\n  calculateResults = (id, value) => {\r\n    this.setState({ [id]: value }, () => {\r\n      let result = Calc.calcArrayOfPressDropGas(this.state.flowGas, 6);\r\n      this.setState({ hasResult: true, result, validationMsg: \"\" });\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let { flowGas, powerGas, result, hasResult, validationMsg } = this.state;\r\n    return (\r\n      <StyledWrapper>\r\n        <StyledFrames title=\"Dobór przewodu gazowego\">\r\n          <InputNum\r\n            id=\"flowGas\"\r\n            labelVal=\"Przepływ m3/h\"\r\n            onChange={this.handleChange}\r\n            value={flowGas}\r\n          />\r\n          <InputNum\r\n            id=\"powerGas\"\r\n            labelVal=\"moc w kW\"\r\n            onChange={this.handleChange}\r\n            value={powerGas}\r\n          />\r\n        </StyledFrames>\r\n        {result && (\r\n          <ResultFrames title=\"Wyniki\">\r\n            <ResultSubHeader>\r\n              Dla{\" \"}\r\n              <span>\r\n                {flowGas} m3/h ~ {powerGas} kW{\" \"}\r\n              </span>{\" \"}\r\n              dobrano następujące przewody:\r\n            </ResultSubHeader>\r\n            <DisplayResults result={result} />\r\n          </ResultFrames>\r\n        )}\r\n        {hasResult && result === false && (\r\n          <ResultFrames title=\"Komunikat\">Zbyt duży przepływ</ResultFrames>\r\n        )}\r\n        {validationMsg && <ResultFrames title=\"Komunikat\">{validationMsg}</ResultFrames>}\r\n      </StyledWrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GasCalc;\r\n","import React, { Component } from \"react\";\r\nimport Button from \"../Basics/Button\";\r\nimport InfoText from \"../Basics/InfoText\";\r\nimport helpIcon from \"../../assets/HelpIcons/help.svg\";\r\nimport folder from \"../../assets/HelpIcons/folder.svg\";\r\nimport knowledge from \"../../assets/HelpIcons/knowledge.svg\";\r\nimport PipesList from \"../Basics/PipesList\";\r\nimport * as pipes from \"../../hardData/pipes\";\r\n\r\nclass GasInfo extends Component {\r\n  state = {\r\n    isInfoOpen: false,\r\n    isPipesDimsOpen: false,\r\n    isTipsOpen: false\r\n  };\r\n\r\n  handleClick = e => {\r\n    let toggledFlag = !this.state[e.target.id];\r\n    let newState = {\r\n      isInfoOpen: false,\r\n      isPipesDimsOpen: false,\r\n      isKnowledgeOpen: false\r\n    };\r\n    newState[e.target.id] = toggledFlag;\r\n    this.setState(newState);\r\n  };\r\n\r\n  handleCloseClick = () => {\r\n    let newState = {\r\n      isInfoOpen: false,\r\n      isPipesDimsOpen: false,\r\n      isKnowledgeOpen: false\r\n    };\r\n    this.setState(newState);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Button id=\"isInfoOpen\" onClick={this.handleClick} text=\"Instrukcja\" />\r\n        <Button\r\n          id=\"isPipesDimsOpen\"\r\n          onClick={this.handleClick}\r\n          text=\"Typoszereg\"\r\n        />\r\n        <Button id=\"isKnowledgeOpen\" onClick={this.handleClick} text=\"Wiedza\" />\r\n        <InfoText\r\n          onClick={this.handleCloseClick}\r\n          isOpen={this.state.isInfoOpen}\r\n          imgPath={helpIcon}\r\n        >\r\n          <p>\r\n            Wprowadź przepływ w m3/h lub moc w kW aby program automatycznie\r\n            dobrał średnicę rur i policzył spadek jednostkowy.\r\n          </p>\r\n          <p>\r\n            W przypadku urządzeń o bardzo niskiej sprawności należy posługiwać\r\n            się przepływem.\r\n          </p>\r\n          <p>\r\n            Przeliczenie z mocy na przepływ odbywa się z uwzględnieniem\r\n            sprawności typowych kotłów gazowych.\r\n          </p>\r\n          <p>\r\n            Pole przepływ w m3/h lub mocy w kW można wypełniać wedle uznania. Po\r\n            wpisaniu jednej wartości, druga wartość zostanie automatycznie\r\n            przeliczona.\r\n          </p>\r\n        </InfoText>\r\n        <InfoText\r\n          onClick={this.handleCloseClick}\r\n          isOpen={this.state.isPipesDimsOpen}\r\n          imgPath={folder}\r\n        >\r\n          <h3>Rury stalowe</h3>\r\n          <PipesList pipes={pipes.steelPipesDiameters} />\r\n        </InfoText>\r\n        <InfoText\r\n          onClick={this.handleCloseClick}\r\n          isOpen={this.state.isKnowledgeOpen}\r\n          imgPath={knowledge}\r\n        >\r\n          <p>\r\n            Wzrost ciśnienia gazu ziemnego w odcinku pionowym przy wznoszeniu o\r\n            1,0 m wynosi 5,4Pa\r\n          </p>\r\n          <p>Dobór rur na podstawie kryterium prędkości 6 m/s.</p>\r\n          <p>\r\n            Zgodnie z rozp. \"sprawie warunków technicznych, jakim powinny\r\n            odpowiadać sieci gazowe i ich usytuowanie\" sieci gazowe dzielą się\r\n            na:\r\n            <ul>\r\n              <li>niskie ciśn. - do 10 kPa (0,1 bar) włącznie</li>\r\n              <li>\r\n                średnie ciśn. - pow. 10 kPa (0,1 bar) do 500 kPa (5 bar)\r\n                włącznie\r\n              </li>\r\n              <li>\r\n                podw. średnie ciśn. - pow. 500 kPa (5 bar) do 1,6 MPa (16 bar)\r\n                włącznie\r\n              </li>\r\n              <li>wyoskie ciśn. - powyżej 1,6 MPa (16 bar)</li>\r\n            </ul>\r\n          </p>\r\n          <p>\r\n            Wymagane ciśnienie gazu dla typowych urządzeń gazowych wynosi 1,6 -\r\n            2,5 kPa (16 mbar - 25 mbar)\r\n          </p>\r\n        </InfoText>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default GasInfo;\r\n","import React from \"react\";\r\n\r\nimport Layout from \"../components/Styles/layout\";\r\nimport GasCalc from \"../components/Gas/GasCalc\";\r\nimport ContentWrapper from \"../components/Basics/ContentWrapper\";\r\nimport GasInfo from \"../components/Gas/GasInfo\";\r\n\r\nclass Gas extends React.Component {\r\n  render() {\r\n    return (\r\n      <Layout>\r\n        <ContentWrapper>\r\n          <GasCalc />\r\n          <GasInfo />\r\n        </ContentWrapper>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\nexport default Gas;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledP = styled.p`\r\n  margin: 0 0 1rem 0;\r\n  font-size: 1.6rem;\r\n  line-height: 2.5rem;\r\n  color: ${({ theme }) => theme.grayextralight};\r\n\r\n  span {\r\n    margin: 0 1rem 0 1rem;\r\n    padding: 0 0.6rem 0 0.6rem;\r\n    border-left: 2px solid ${({ theme }) => theme.primarygreen};\r\n    border-right: 2px solid ${({ theme }) => theme.primarygreen};\r\n  }\r\n`;\r\n\r\nconst ResultSubHeader = ({ children }) => <StyledP>{children}</StyledP>;\r\n\r\nexport default ResultSubHeader;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledResult = styled.p`\r\n  color: white;\r\n  /* margin: 0.7rem 0; */\r\n`;\r\n\r\nconst DisplayResults = ({ result, isRoundDuct }) => {\r\n  if (result) {\r\n    return result.map((item) => {\r\n      return (\r\n        <StyledResult\r\n          style={item.isAboveAcceptable ? { color: \"red\" } : null}\r\n          key={Math.random()}\r\n        >\r\n          {isRoundDuct ? \"φ\" : \"\"}\r\n          {item.diameter} &nbsp; - &nbsp;{item.pressureDrop} Pa/m &nbsp;-&nbsp;\r\n          {item.speed} m/s\r\n        </StyledResult>\r\n      );\r\n    });\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport default DisplayResults;\r\n"],"sourceRoot":""}